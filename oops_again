import json
import os
import rstr  # You might need to run: pip install rstr

# --- File Setup ---
ACCOUNTS_FILE = "accounts.json"

# Ensure accounts.json exists
if not os.path.exists(ACCOUNTS_FILE):
    with open(ACCOUNTS_FILE, "w") as f:
        json.dump([], f)

# --- Bank_account Class (Original Style) ---
class Bank_account:
    def __init__(self, account_number, account_holder, balance=0):
        self.__account_number = account_number
        self.__account_holder = account_holder
        self.__balance = float(balance)

    def deposit(self, amount):
        amount = float(amount)
        if amount > 0:
            self.__balance += amount
            print(f"Amount deposited is {amount}")
            print(f"Updated balance is {self.__balance}")
        else:
            print("Invalid amount entered")

    def withdraw(self, amount):
        amount = float(amount)
        if 0 < amount <= self.__balance:
            self.__balance -= amount
            print(f"Amount withdrawn is {amount}")
            print(f"Updated balance is {self.__balance}")
        else:
            print("Invalid amount entered or insufficient funds")

    def get_balance(self):
        return self.__balance
        
    def get_account_number(self):
        return self.__account_number

    def account_info(self):
        print(f"Account holder : {self.__account_holder}")
        print(f"Account number : {self.__account_number}")
        print(f"Current balance: {self.__balance}")

    def to_dict(self):
        return {
            "account_number": self.__account_number,
            "account_holder": self.__account_holder,
            "balance": self.__balance
        }

# --- Data Functions (Original Style) ---
def load_accounts_from_json():
    """Reads and returns all accounts from the JSON file."""
    try:
        with open(ACCOUNTS_FILE, "r") as f:
            content = f.read().strip()
            return json.loads(content) if content else []
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_accounts_to_json(accounts):
    """Saves a list of account dictionaries to the JSON file."""
    with open(ACCOUNTS_FILE, "w") as f:
        json.dump(accounts, f, indent=4)

# --- Core Logic Functions ---
def generate_unique_account_number():
    """Generates a unique account number."""
    existing_accounts = load_accounts_from_json()
    existing_numbers = {acc["account_number"] for acc in existing_accounts}
    while True:
        # format: CHXX3736###
        new_acc_num = rstr.xeger(r'CH[A-Z]{2}3736\d{3}')
        if new_acc_num not in existing_numbers:
            return new_acc_num

def create_account():
    """Guides the user through creating a new bank account."""
    print("\n--- Create New Account ---")
    name = input("Enter your name: ")
    while True:
        try:
            initial_balance = float(input("Enter initial deposit amount: "))
            if initial_balance >= 0:
                break
            else:
                print("Initial deposit cannot be negative.")
        except ValueError:
            print("Please enter a valid number.")

    acc_no = generate_unique_account_number()
    account = Bank_account(acc_no, name, initial_balance)
    
    # Add the new account to storage
    all_accounts = load_accounts_from_json()
    all_accounts.append(account.to_dict())
    save_accounts_to_json(all_accounts)

    print("\nAccount created successfully!")
    account.account_info()
    return account

def switch_account():
    acc_num_to_find = input("Enter the account number to switch to: ")
    all_accounts = load_accounts_from_json()
    for acc_dict in all_accounts:
        if acc_dict["account_number"] == acc_num_to_find:
            found_account = Bank_account(
            acc_dict["account_number"],
            acc_dict["account_holder"],
            acc_dict["balance"]
        )
            # Return the newly created object
            return found_account
    print("No account found")
    return None


# --- Main Program Execution ---
print("Welcome to Mallya bank, how can we help you today")
print("Our services\n---------------")

# This variable will hold the account being actively used in this session.
account = None
service = 0

while service != 7:
    print("\n1. Open New Account")
    print("2. Get Account Info")
    print("3. Deposit")
    print("4. Withdraw")
    print("5. Get Balance")
    print("6. Switch Account")
    print("7. Exit")
    print("\n---------------")

    try:
        service = int(input("Choose a service: "))
    except ValueError:
        print("Please enter a valid number")
        continue

    if service == 1:
        account = create_account()
    
    elif service == 2:
        if account:
            account.account_info()
        else:
            print("Please either open an account first, if you have one then you may use switch account by pressing 6.")
    
    elif service == 3:
        if account:
            try:
                amount = float(input("Enter amount to deposit: "))
                account.deposit(amount)
                
                # Save the updated account information
                accounts = load_accounts_from_json()
                for acc_dict in accounts:
                    if acc_dict["account_number"] == account.get_account_number():
                        acc_dict["balance"] = account.get_balance()
                        break
                save_accounts_to_json(accounts)

            except ValueError:
                print("Please enter a valid number.")
        else:
            print("Please open an account first.")
    
    elif service == 4:
        if account:
            try:
                amount = float(input("Enter amount to withdraw: "))
                account.withdraw(amount)
                
                # Save the updated account information
                accounts = load_accounts_from_json()
                for acc_dict in accounts:
                    if acc_dict["account_number"] == account.get_account_number():
                        acc_dict["balance"] = account.get_balance()
                        break
                save_accounts_to_json(accounts)

            except ValueError:
                print("Please enter a valid number.")
        else:
            print("Please open an account first.")
    
    elif service == 5:
        if account:
            print(f"Current balance: {account.get_balance()}")
        else:
            print("Please open an account first.")
    
    elif service == 6:
        switched = switch_account()
        if switched:
            account = switched
    elif service == 7:
        print("Thank you for using our services, We hope to see you back soon")
        break
    else:
        print("Invalid option. Please select a valid service.")
